import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

interface AuthenticatedRequest extends Request {
  user?: any;
}

export const mobileAuthMiddleware = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  // Verificar se √© uma requisi√ß√£o do mobile atrav√©s de header customizado
  const clientType = req.headers['x-client-type'];
  const isMobileRequest = clientType === 'mobile' || clientType === 'app';

  // Se for mobile, permite acesso sem autentica√ß√£o
  if (isMobileRequest) {
    console.log('üì± Requisi√ß√£o mobile detectada - acesso p√∫blico permitido');
    return next();
  }

  // Se for web ou n√£o especificado, exige autentica√ß√£o
  console.log('üåê Requisi√ß√£o web detectada - autentica√ß√£o obrigat√≥ria');
  
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ 
      message: 'Token de autentica√ß√£o obrigat√≥rio para acesso web',
      hint: 'Para acesso mobile, adicione o header: X-Client-Type: mobile'
    });
  }

  const token = authHeader.substring(7);
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret_here');
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Token inv√°lido' });
  }
}; 